# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions
# Added SNYK Security Scanning and reporting to ServiceNow DevOps Change Velocity (DCV).

name: Build and deploy Python app to Azure Web App - tcazr-test-webapp
on:
  push:
    branches:
      - main
  workflow_dispatch:
# Define the jobs of the workflow
jobs:
  change:
    name: change
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load change request JSON
        id: load_json
        run: |
          content=$(jq -c . change-request.json)
          echo "json=$content" >> $GITHUB_OUTPUT
          echo "Payload: $content"

      # Register a deployment gate in ServiceNow DCV
      - name: Register deployment gate
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'change'
          change-request: '${{ steps.load_json.outputs.json }}'
          deployment-gate: '{"environment": "prod","jobName": "deploy"}'

  test:
    name: test
    needs: change
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 #Default action
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

        # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

        # Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

        # Create and start virtual environment
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest coverage

        # Run tests with coverage
      - name: Run Pytest with coverage
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd) \
          coverage run -m pytest --junitxml=results.xml
          coverage xml -o coverage.xml
          coverage report -m

        # Upload test results in ServiceNow DCV demo
      - name: Register test results in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-test-report@v6.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'test'
          xml-report-filename: results.xml
          test-summary-name: 'Unit Test Summary'

#### New Steps for snyk scanning ####

      # ðŸ”Ž NEW: Run Snyk scan for Python
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk-results.json

      - name: Summarize Snyk results into DCV payload
        run: |
          python - <<'EOF'
          import json, os
          from datetime import datetime, timezone

          # Load Snyk results
          with open("snyk-results.json") as f:
              results = json.load(f)

          # Count severities
          summary = {"critical": 0, "high": 0, "medium": 0, "low": 0}
          for vuln in results.get("vulnerabilities", []):
              sev = vuln.get("severity")
              if sev in summary:
                  summary[sev] += 1

          # Build DCV payload with clean UTC timestamp
          dcv_payload = {
              "tool_id": os.environ["SN_ORCHESTRATION_TOOL_ID"],
              "job_name": "test",
              "context_github": json.loads(os.environ["GITHUB_CONTEXT"]),
              "scan_results": {
                  "tool_name": "Snyk",
                  "application": "python-app",
                  "scan_time": datetime.now(timezone.utc).replace(microsecond=0).isoformat().replace("+00:00", "Z"),
                  "summary": summary
              }
          }

          with open("dcv-summary.json", "w") as out:
              json.dump(dcv_payload, out, indent=2)

          print("DCV payload written:", json.dumps(dcv_payload, indent=2))
          EOF
        env:
          SN_ORCHESTRATION_TOOL_ID: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          GITHUB_CONTEXT: ${{ toJSON(github) }}

      - name: Debug DCV payload
        run: cat dcv-summary.json

      - name: Post Snyk summary to ServiceNow DCV
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}" \
            "${{ secrets.SN_INSTANCE_URL }}/api/sn_devops/devops/security/inbound_event" \
            -d @dcv-summary.json

#### End of new Snyk steps ####

      # Run SonarQube Scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # Register the SonarQube results in ServiceNow DCV
      - name: Register SonarQube results in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-sonar@v5.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'test'
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}

  build:
    name: build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Cache pip dependencies
      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run build (if applicable)
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            app.py
            templates/**
            requirements.txt

      # Register the build artifact in ServiceNow DCV
      - name: Register build artifact in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'build'
          artifacts: |
            [{
              "name": "python-app",
              "version": "1.${{ github.run_number }}",
              "semanticVersion": "1.${{ github.run_number }}.0",
              "repositoryName": "${{ github.repository }}",
              "branchName": "${{ github.ref_name }}",
              "commitId": "${{ github.sha }}"
            }]
  
  deploy:
    name: deploy
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write
      contents: read
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }}
      SERVICE_NOW_API: ${{ secrets.SERVICE_NOW_API }}
      FLASK_SECRET: ${{ secrets.FLASK_SECRET }}
    steps:
      # Get the code from the build job
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_51A493B9A49A4035A19E7838BA54461C }}
          
        # Set the App Service settings. We do this here so that they are set before the deployment step.
      - name: Set App Service settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set \
              --resource-group TCAZR-UKSOUTH-WEBHOSTING-RSG \
              --name tcazr-test-webapp \
              --settings \
                AZURE_CLIENT_ID=${{ secrets.AZURE_OIDC_CLIENT_ID }} \
                AZURE_TENANT_ID=${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }} \
                FLASK_SECRET=${{ secrets.FLASK_SECRET }} \
                SERVICE_NOW_API=${{ secrets.SERVICE_NOW_API }}
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'tcazr-test-webapp'
          slot-name: 'Production'