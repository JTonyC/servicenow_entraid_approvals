# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - tcazr-test-webapp

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            app.py
            templates/**
            requirements.txt
      - name: Register build artifact in ServiceNow
        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          job-name: "Register Artifact"
          context-github: ${{ toJSON(github) }}
          artifacts: >-
            [
              {
                "name": "python-app",
                "version": "1.${{ github.run_number }}",
                "semanticVersion": "1.${{ github.run_number }}.0",
                "repositoryName": "${{ github.repository }}",
                "branchName": "${{ github.ref_name }}",
                "commitId": "${{ github.sha }}"
              }
            ]

  ServiceNowDevOpsChange:
    needs: build
    runs-on: ubuntu-latest
    environment: prod
    name: ServiceNow DevOps Change
    steps:
      - name: Register deployment gate
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: ServiceNow DevOps Change
          change-request: '{
            "setCloseCode":"true",
            "attributes":{
              "short_description":"Automated Software Deployment",
              "description":"Automated Software Deployment via GitHub Actions",
              "assignment_group":"DCV-Approval-Dashboard",
              "implementation_plan":"Software update is testedand results can be found in Test Summaries Tab; When the change is approved, the CD pipeline will deploy the update within the change planned start and end time window.",
              "backout_plan":"When software fails in production, the previous software release will be re-deployed.",
              "test_plan":"Testing if the software was successfully deployed."
              }
            }'
          interval: '100'
          timeout: '3600'
          deployment-gate: '{"environment": "prod","jobName": "deploy"}'

  deploy:
    needs: ServiceNowDevOpsChange
    runs-on: ubuntu-latest
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }}
      SERVICE_NOW_API: ${{ secrets.SERVICE_NOW_API }}
      FLASK_SECRET: ${{ secrets.FLASK_SECRET }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_51A493B9A49A4035A19E7838BA54461C }}

      - name: Set App Service settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set \
              --resource-group TCAZR-UKSOUTH-WEBHOSTING-RSG \
              --name tcazr-test-webapp \
              --settings \
                AZURE_CLIENT_ID=${{ secrets.AZURE_OIDC_CLIENT_ID }} \
                AZURE_TENANT_ID=${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }} \
                FLASK_SECRET=${{ secrets.FLASK_SECRET }} \
                SERVICE_NOW_API=${{ secrets.SERVICE_NOW_API }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'tcazr-test-webapp'
          slot-name: 'Production'