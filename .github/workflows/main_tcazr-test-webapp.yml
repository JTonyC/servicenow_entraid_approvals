# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - tcazr-test-webapp

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: test
    runs-on: ubuntu-latest
    outputs:
      test_result_id: ${{ steps.register_tests.outputs.test_result_id }}
      sast_result_id: ${{ steps.register_sast.outputs.security_result_id }}
    steps:
      - uses: actions/checkout@v4 #Default action

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit

      - name: Run unit tests
        run: PYTHONPATH=$PYTHONPATH:$(pwd) pytest --junitxml=results.xml

      - name: Register test results in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-test-report@v6.0.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'test'
          xml-report-filename: results.xml
          test-summary-name: 'Unit Test Summary'

      - name: SonarQube Setup
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


      - name: Register SonarQube results in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-sonar@v3.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'test'
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}

      - name: Run Bandit SAST
        run: |
          python -m bandit -r . -f json -o bandit-results.json --severity-level low --confidence-level high || true

      - name: Parse Bandit results for flaw counts
        id: parse_bandit
        run: |
          import json
          import os
          from datetime import datetime

          data = json.load(open("bandit-results.json"))
          high = sum(1 for r in data.get("results", []) if r.get("issue_severity", "").lower() == "high")
          medium = sum(1 for r in data.get("results", []) if r.get("issue_severity", "").lower() == "medium")
          low = sum(1 for r in data.get("results", []) if r.get("issue_severity", "").lower() == "low")
          total = high + medium + low
          print(f"High: {high}, Medium: {medium}, Low: {low}, Total: {total}")
          summary = {
              "scanner": "Bandit",
              "applicationName": "DCV Approvals Dashboard",
              "discoveredApplication": "DCV Approvals Dashboard",
              "buildVersion": os.getenv('GITHUB_RUN_NUMBER'),
              "fileName": "bandit-results.json",
              "format": "generic",
              "lastScanDate": datetime.utcnow().isoformat() + "Z",
              "scanSummaryName": "Bandit Security Scan",
              "sourceScanId": os.getenv('GITHUB_SHA'),
              "flawCount": int(total),
              "highCount": int(high),
              "mediumCount": int(medium),
              "lowCount": int(low)
          }

          print("Security attributes payload:", json.dumps(summary))

          with open("bandit-summary.json", "w") as f:
              json.dump(summary, f)
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              env_file.write(f'SECURITY_ATTRS={json.dumps(summary)}\n')
        shell: python

      - name: Register security results in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-security-result@v3.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'test'
          security-result-attributes: ${{ env.SECURITY_ATTRS }}

  build:
    name: build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            app.py
            templates/**
            requirements.txt

      - name: Register build artifact in ServiceNow DCV
        uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'build'
          artifacts: |
            [{
              "name": "python-app",
              "version": "1.${{ github.run_number }}",
              "semanticVersion": "1.${{ github.run_number }}.0",
              "repositoryName": "${{ github.repository }}",
              "branchName": "${{ github.ref_name }}",
              "commitId": "${{ github.sha }}"
            }]

  change:
    needs: build
    runs-on: ubuntu-latest
    #environment: prod
    name: change
    steps:
      - name: Register deployment gate
        uses: ServiceNow/servicenow-devops-change@v6.1.0
        with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_INTEGRATION_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: "change"
          deployment-gate: >-
            {
              "environment": "prod",
              "jobName": "deploy",
              "model": "DevOps Simplified",
              "risk": "Low",
              "assignment_group": "DevOps",
              "test_results": "${{ needs.test.outputs.test_result_id }}",
              "security_results": "${{ needs.build.outputs.sast_result_id }}"
            }

  deploy:
    needs: change
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }}
      SERVICE_NOW_API: ${{ secrets.SERVICE_NOW_API }}
      FLASK_SECRET: ${{ secrets.FLASK_SECRET }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_OIDC_CLIENT_ID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_51A493B9A49A4035A19E7838BA54461C }}
      - name: Set App Service settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config appsettings set \
              --resource-group TCAZR-UKSOUTH-WEBHOSTING-RSG \
              --name tcazr-test-webapp \
              --settings \
                AZURE_CLIENT_ID=${{ secrets.AZURE_OIDC_CLIENT_ID }} \
                AZURE_TENANT_ID=${{ secrets.AZUREAPPSERVICE_TENANTID_5909E22C6034485D950022D0F2447A5F }} \
                FLASK_SECRET=${{ secrets.FLASK_SECRET }} \
                SERVICE_NOW_API=${{ secrets.SERVICE_NOW_API }}
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'tcazr-test-webapp'
          slot-name: 'Production'